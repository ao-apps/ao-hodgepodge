package com.aoindustries.apache.tomcat;

/*
 * Copyright 2000-2005 by AO Industries, Inc.,
 * 816 Azalea Rd, Mobile, Alabama, 36693, U.S.A.
 * All rights reserved.
 */
import com.aoindustries.io.unix.*;
import com.aoindustries.profiler.*;
import com.aoindustries.util.*;
import java.io.*;

/**
 * @version  1.0
 *
 * @author  AO Industries, Inc.
 */
final public class VirtualTomcatOutputStream extends OutputStream {

    final PrintStream masterOutput;

    private final ThreadGroup[] threadGroups;
    private final OutputStream[] outputStreams;
    private final String[] sites;

    private int lastGroup=-1;

    public VirtualTomcatOutputStream(PrintStream masterOutput, String[] sites, ThreadGroup[] threadGroups) {
        Profiler.startProfile(Profiler.IO, VirtualTomcatOutputStream.class, "<init>(PrintStream,String[],ThreadGroup[])", null);
        try {
            this.masterOutput = masterOutput;
            this.threadGroups = threadGroups;
            this.sites = sites;

            // Open up the output streams only if it does not go to a symbolic link
            int len = threadGroups.length;
            outputStreams = new OutputStream[len];
            for (int c = 0; c < len; c++) {
                String filename = VirtualTomcat.WWW_DIRECTORY + '/' + sites[c] + "/var/log/servlet_err";
                try {
                    outputStreams[c] = new FileOutputStream(filename);
                } catch (IOException err) {
                    ErrorPrinter.printStackTraces(err, masterOutput, new Object[] {"filename="+filename});
                }
                if (outputStreams[c] == null) outputStreams[c] = masterOutput;
            }
        } finally {
            Profiler.endProfile(Profiler.IO);
        }
    }

    /**
     * The output streams cannot be closed.
     */
    public void close() throws IOException {
        Profiler.startProfile(Profiler.INSTANTANEOUS, VirtualTomcatOutputStream.class, "close()", null);
        Profiler.endProfile(Profiler.INSTANTANEOUS);
    }

    public void flush() throws IOException {
        Profiler.startProfile(Profiler.IO, VirtualTomcatOutputStream.class, "flush()", null);
        try {
            printGroup();
            masterOutput.flush();
            OutputStream out = getOutputStream();
            if (out != null) out.flush();
        } finally {
            Profiler.endProfile(Profiler.IO);
        }
    }

    private OutputStream getOutputStream() {
        Profiler.startProfile(Profiler.FAST, VirtualTomcatOutputStream.class, "getOutputStream()", null);
        try {
            // Search for a thread group match
            int len = threadGroups.length;
            ThreadGroup TG = Thread.currentThread().getThreadGroup();
            while (TG != null) {
                for (int c = 0; c < len; c++)
                    if (threadGroups[c] == TG) return outputStreams[c];
                TG = TG.getParent();
            }
            return null;
        } finally {
            Profiler.endProfile(Profiler.FAST);
        }
    }

    private void printGroup() throws IOException {
        Profiler.startProfile(Profiler.IO, VirtualTomcatOutputStream.class, "printGroup()", null);
        try {
            int len = threadGroups.length;
            ThreadGroup TG = Thread.currentThread().getThreadGroup();
            while (TG != null) {
                for (int c = 0; c < len; c++) {
                    if (threadGroups[c] == TG) {
                        if (c != lastGroup) {
                            masterOutput.write('\n');
                            masterOutput.write('-');
                            masterOutput.write(' ');
                            String name = sites[c];
                            int len2 = name.length();
                            for (int d = 0; d < len2; d++) masterOutput.write(name.charAt(d));
                            masterOutput.write(' ');
                            masterOutput.write('-');
                            masterOutput.write('\n');
                            lastGroup = c;
                        }
                    }
                }
                TG = TG.getParent();
            }
            // Not Found
        } finally {
            Profiler.endProfile(Profiler.IO);
        }
    }

    public void write(byte[] b) throws IOException {
        Profiler.startProfile(Profiler.IO, VirtualTomcatOutputStream.class, "write(byte[])", null);
        try {
            printGroup();
            masterOutput.write(b);
            OutputStream out = getOutputStream();
            if (out != null) out.write(b);
        } finally {
            Profiler.endProfile(Profiler.IO);
        }
    }

    public void write(byte b[], int off, int len) throws IOException {
        Profiler.startProfile(Profiler.IO, VirtualTomcatOutputStream.class, "write(byte[],int,int)", null);
        try {
            printGroup();
            masterOutput.write(b, off, len);
            OutputStream out = getOutputStream();
            if (out != null) out.write(b, off, len);
        } finally {
            Profiler.endProfile(Profiler.IO);
        }
    }

    public void write(int b) throws IOException {
        Profiler.startProfile(Profiler.IO, VirtualTomcatOutputStream.class, "write(byte)", null);
        try {
            printGroup();
            masterOutput.write(b);
            OutputStream out = getOutputStream();
            if (out != null) out.write(b);
        } finally {
            Profiler.endProfile(Profiler.IO);
        }
    }
}