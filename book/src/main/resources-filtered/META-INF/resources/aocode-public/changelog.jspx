<?xml version="1.0" encoding="UTF-8"?>
<!--
aocode-public - Reusable Java library of general tools with minimal external dependencies.
Copyright (C) 2016, 2017, 2018, 2019  AO Industries, Inc.
    support@aoindustries.com
    7262 Bull Pen Cir
    Mobile, AL 36695

This file is part of aocode-public.

aocode-public is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

aocode-public is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with aocode-public.  If not, see <http://www.gnu.org/licenses />.
-->
<jsp:root
	xmlns:ao="https://aoindustries.com/ao-taglib/"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:changelog="https://semanticcms.com/changelog/taglib/"
	xmlns:core="https://semanticcms.com/core/taglib/"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:jsp="http://java.sun.com/JSP/Page"
	xmlns:section="https://semanticcms.com/section/taglib/"
	version="2.1"
>
	<jsp:directive.page language="java" pageEncoding="UTF-8" session="false" />
	<core:page
		title="@{documented.name} Changelog"
		shortTitle="Changelog"
		tocLevels="1"
		datePublished="2016-10-29T16:23:04-0500"
		dateModified="2019-07-27T03:26:54-0500"
	>
		<!-- The current snapshot, unreleased version -->
		<c:set var="version" value="@{com.aoindustries:aocode-public:pom.version}" />
		<ao:assert
			test="${!fn:startsWith(version, '@')}"
			message="Version not substituted: #{version}"
		/>
		<c:if test="${fn:endsWith(version, '-SNAPSHOT') and !fn:endsWith(version, '-POST-SNAPSHOT')}">
			<changelog:release
				projectName="@{documented.name}"
				version="#{version}"
				groupId="@{documented.groupId}"
				artifactId="@{documented.artifactId}"
				scmUrl="@{documented.scm.url}"
			>
				<ul>
					<li>
						New abstract class <ao:a href="apidocs/com/aoindustries/sql/ConnectionWrapper.html">ConnectionWrapper</ao:a>
						split from <ao:a href="apidocs/com/aoindustries/sql/PostgresqlConnectionWrapper.html">PostgresqlConnectionWrapper</ao:a>
						to be used by other implementations of <ao:a rel="nofollow" href="@{javac.link.javaApi}java/sql/Connection.html">Connection</ao:a>
						wrapping.
					</li>
					<li>Removed some long-deprecated or otherwise long-unused classes and methods:
						<ol>
							<li><code>com.aoindustries.servlet.http.ServletUtil.getResource(*)</code></li>
							<li><code>com.aoindustries.servlet.http.ServletUtil.resourceExists(*)</code></li>
							<li><code>com.aoindustries.sql.SQLUtility.escapeSQL(*)</code></li>
							<li><code>com.aoindustries.sql.SQLUtility.encodeString(String)</code></li>
							<li><code>com.aoindustries.sql.SQLUtility.decodeString(String)</code></li>
							<li><code>com.aoindustries.sql.SQLUtility.negIntIfEmpty(String)</code></li>
							<li><code>com.aoindustries.sql.SQLUtility.negLongIfEmpty(String)</code></li>
							<li><code>com.aoindustries.sql.SQLUtility.nullIfEmpty(String)</code></li>
							<li><code>com.aoindustries.sql.SQLUtility.getDaysFromMillis(long)</code></li>
							<li><code>com.aoindustries.sql.SQLUtility.getMillisFromDays(long)</code></li>
							<li><code>com.aoindustries.sql.SQLUtility.roundToDay(long)</code></li>
							<li><code>com.aoindustries.sql.SQLUtility.printResultSetHTMLTable(ResultSet, Appendable, String, boolean)</code></li>
							<li><code>com.aoindustries.util.Stack</code></li>
							<li><code>com.aoindustries.util.StringUtility.buildEmailList(String[])</code></li>
							<li><code>com.aoindustries.util.StringUtility.buildList(*)</code></li>
							<li><code>com.aoindustries.util.StringUtility.compareToDDMMYYYY(String, String)</code></li>
							<li><code>com.aoindustries.util.StringUtility.convertStringDateToTime(String)</code></li>
							<li><code>com.aoindustries.util.StringUtility.countOccurances(*)</code></li>
							<li><code>com.aoindustries.util.StringUtility.escapeSQL(String)</code></li>
							<li><code>com.aoindustries.util.StringUtility.getDateMMDDYYYY(String)</code></li>
							<li><code>com.aoindustries.util.StringUtility.getDateString(*)</code></li>
							<li><code>com.aoindustries.util.StringUtility.getDateStringMMDDYYYY(Date)</code></li>
							<li><code>com.aoindustries.util.StringUtility.getDateStringSecond(*)</code></li>
							<li><code>com.aoindustries.util.StringUtility.getStringArray(List)</code></li>
							<li><code>com.aoindustries.util.StringUtility.intern(String)</code></li>
							<li><code>com.aoindustries.util.StringUtility.isValidDate(String)</code></li>
							<li><code>com.aoindustries.util.StringUtility.leapYear(int)</code></li>
							<li><code>com.aoindustries.util.StringUtility.removeChars(*)</code></li>
							<li><code>com.aoindustries.util.WildcardPatternMatcher.getMatchNone()</code></li>
							<li><code>com.aoindustries.util.WildcardPatternMatcher.getMatchAll()</code></li>
							<li><code>com.aoindustries.util.WildcardPatternMatcher.getInstance(String)</code></li>
							<li><code>com.aoindustries.util.logging.ProcessTimer.ProcessTimer(Logger, <span style="text-decoration: line-through">Random,</span> String, String, String, String, long, long)</code></li>
							<li><code>com.aoindustries.util.logging.ProcessTimer.finished()</code></li>
							<li><code>com.aoindustries.util.persistent.PersistentCollections.charToBuffer(*)</code></li>
							<li><code>com.aoindustries.util.persistent.PersistentCollections.bufferToChar(*)</code></li>
							<li><code>com.aoindustries.util.persistent.PersistentCollections.shortToBuffer(*)</code></li>
							<li><code>com.aoindustries.util.persistent.PersistentCollections.bufferToShort(*)</code></li>
							<li><code>com.aoindustries.util.persistent.PersistentCollections.intToBuffer(*)</code></li>
							<li><code>com.aoindustries.util.persistent.PersistentCollections.bufferToInt(*)</code></li>
							<li><code>com.aoindustries.util.persistent.PersistentCollections.longToBuffer(*)</code></li>
							<li><code>com.aoindustries.util.persistent.PersistentCollections.bufferToLong(*)</code></li>
						</ol>
					</li>
					<li>Significant, breaking changes to <ao:a href="apidocs/com/aoindustries/sql/SQLUtility.html">SQLUtility</ao:a>:
						<ol>
							<li>Renamed <code>getDate(long)</code> to <code>formatDate(long)</code></li>
							<li>Added <code>formatDate(long, TimeZone)</code> for other time zones</li>
							<li>Added <code>formatDate(Long)</code> for nullable integers</li>
							<li>Added <code>formatDate(Long, TimeZone)</code> for nullable integers</li>
							<li>Added <code>formatDate(Date)</code> for dates</li>
							<li>Added <code>formatDate(Date, TimeZone)</code> for dates</li>
							<li>Renamed <code>getDate(String)</code> to <code>parseDate(String)</code></li>
							<li>Added <code>parseDate(String, TimeZone)</code> for other time zones</li>
							<li>Renamed <code>getDateTime(long)</code> to <code>formatDateTime(long)</code></li>
							<li>Added <code>formatDateTime(long, TimeZone)</code> for other time zones</li>
							<li>Added <code>formatDateTime(Long)</code> for nullable integers</li>
							<li>Added <code>formatDateTime(Long, TimeZone)</code> for nullable integers</li>
							<li>Added <code>formatDateTime(Date)</code> for dates</li>
							<li>Added <code>formatDateTime(Date, TimeZone)</code> for dates</li>
							<li>Renamed <code>getDateTime(String)</code> to <code>parseDateTime(String)</code></li>
							<li>Added <code>parseDateTime(String, TimeZone)</code> for other time zones</li>
							<li>Renamed <code>getTime(long)</code> to <code>formatTime(long)</code></li>
							<li>Added <code>formatTime(long, TimeZone)</code> for other time zones</li>
							<li>Added <code>formatTime(Long)</code> for nullable integers</li>
							<li>Added <code>formatTime(Long, TimeZone)</code> for nullable integers</li>
							<li>Added <code>formatTime(Date)</code> for dates</li>
							<li>Added <code>formatTime(Date, TimeZone)</code> for dates</li>
							<li>Renamed <code>getDecimal(int)</code> to <code>formatDecimal2(int)</code></li>
							<li>Renamed <code>getDecimal(long)</code> to <code>formatDecimal2(long)</code></li>
							<li>Renamed <code>getPennies(String)</code> to <code>parseDecimal2(String)</code></li>
							<li>Renamed <code>getPenniesLong(String)</code> to <code>parseLongDecimal2(String)</code></li>
							<li>Renamed <code>getMilliDecimal(int)</code> to <code>formatDecimal3(int)</code></li>
							<li>Renamed <code>getMilliDecimal(long)</code> to <code>formatDecimal3(long)</code></li>
							<li>Renamed <code>getMillis(String)</code> to <code>parseDecimal3(String)</code></li>
							<li>Added <code>parseLongDecimal3(String)</code></li>
						</ol>
					</li>
					<li>
						<p>
							New methods to read and write possibly nullable <ao:a rel="nofollow" href="@{javac.link.javaApi}java/sql/Timestamp.html">Timestamp</ao:a>
							in <ao:a href="apidocs/com/aoindustries/io/CompressedDataOutputStream.html">CompressedDataOutputStream</ao:a>
							and <ao:a href="apidocs/com/aoindustries/io/CompressedDataInputStream.html">CompressedDataInputStream</ao:a>.
						</p>
						<p>
							These methods use a wire protocol deliberately compatible with
							<ao:a rel="nofollow" href="https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html">Instant</ao:a> in Java 8,
							however the API remains <code>Timestamp</code>-only since the minimum Java version is still 1.7.
						</p>
					</li>
					<li>
						Added protocol version to reading in <code>Streamable</code> and <code>CompressedReadable</code>, because a server may be
						reading objects streamed by older clients.  Protocol compatibility can be necessary both directions.
					</li>
					<li>New methods to read and write possibly nullable <code>Identifier</code> and <code>SmallIdentifier</code>.</li>
				</ul>
			</changelog:release>
		</c:if>

		<changelog:release
			projectName="@{documented.name}"
			version="2.1.1"
			datePublished="2019-06-29T19:36:26-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>
					<p>
						Using <code>;-split-package:=first</code> of <ao:a href="http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html">maven-bundle-plugin</ao:a>
						to avoid bundling the classes in the split packages from
						<core:link book="/ao-lang" page="/index.jspx" />.
					</p>
					<p>
						These split packages are transitional.  In the future we will have more fine-grained projects.
					</p>
				</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="2.1.0"
			datePublished="2019-06-19T05:59:50-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>
					New methods to read and write nullable <ao:a rel="nofollow" href="@{javac.link.javaApi}java/lang/Byte.html">Byte</ao:a>:
					<ul>
						<li><ao:a href="apidocs/com/aoindustries/io/CompressedDataOutputStream.html#writeNullByte-java.lang.Byte-">CompressedDataOutputStream.writeNullByte(Byte)</ao:a></li>
						<li><ao:a href="apidocs/com/aoindustries/io/CompressedDataInputStream.html#readNullByte--">CompressedDataInputStream.readNullByte()</ao:a></li>
					</ul>
				</li>
				<li>
					New methods to read and write nullable <ao:a rel="nofollow" href="@{javac.link.javaApi}java/lang/Short.html">Short</ao:a>:
					<ul>
						<li><ao:a href="apidocs/com/aoindustries/io/CompressedDataOutputStream.html#writeNullShort-java.lang.Short-">CompressedDataOutputStream.writeNullShort(Short)</ao:a></li>
						<li><ao:a href="apidocs/com/aoindustries/io/CompressedDataInputStream.html#readNullShort--">CompressedDataInputStream.readNullShort()</ao:a></li>
					</ul>
				</li>
				<li>Using managed dependencies:
					<ol>
						<li>This project uses managed dependencies.</li>
						<li>This project's managed dependencies may also be imported by other projects.</li>
					</ol>
				</li>
				<li>Improved API docs linking.</li>
				<li>
					New methods to quickly get the last modified time of a web resource.
					The result may be cached for up to five seconds.
					<ul>
						<li><ao:a href="apidocs/com/aoindustries/servlet/ServletContextCache.html#getLastModified-java.lang.String-">ServletContextCache.getLastModified(String)</ao:a></li>
						<li><ao:a href="apidocs/com/aoindustries/servlet/ServletContextCache.html#getLastModified-javax.servlet.ServletContext-java.lang.String-">ServletContextCache.getLastModified(ServletContext, String)</ao:a></li>
					</ul>
				</li>
				<li>Improved implementation of <ao:a rel="nofollow" href="@{javac.link.javaApi}java/sql/Wrapper.html">java.sql.Wrapper</ao:a>.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="2.0.0"
			datePublished="2019-04-18T06:17:06-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Minimum Java version changed from 1.6 to 1.7.</li>
				<li>
					Deprecated in favor of new <ao:a href="https://aoindustries.com/ao-tempfiles/apidocs/com/aoindustries/tempfiles/TempFileContext.html">TempFileContext</ao:a>
					that does not suffer from a memory leak in long-running applications:
					<ul>
						<li><ao:a href="apidocs/com/aoindustries/io/TempFile.html">TempFile</ao:a></li>
						<li><ao:a href="apidocs/com/aoindustries/io/TempFileList.html">TempFileList</ao:a></li>
						<li><ao:a href="apidocs/com/aoindustries/io/FileList.html#getTempFile-java.lang.String-java.lang.String-">FileList.getTempFile(String prefix, String extension)</ao:a></li>
					</ul>
				</li>
				<li>
					Improved <ao:a href="apidocs/com/aoindustries/servlet/ServletContextCache.html">ServletContextCache</ao:a>
					to still work correctly when accessed before initialized by
					<ao:a href="apidocs/com/aoindustries/servlet/ServletContextCacheListener.html">ServletContextCacheListener</ao:a>.
					This allows the caches to safely be used during application initialization.  This also
					allows the cache to still work correctly without being initialized as a web listener, at the cost
					of not stopping promptly when context destroyed.
				</li>
				<li>
					New constant <ao:a href="apidocs/com/aoindustries/servlet/http/ServletUtil.html#SKIP_PAGE_EXCEPTION">ServletUtil.SKIP_PAGE_EXCEPTION</ao:a>
					to avoid the overhead of instantiating new <ao:a rel="nofollow" href="@{javac.link.javaeeApi.6}javax/servlet/jsp/SkipPageException.html">SkipPageException</ao:a>
					repeatedly during routine operation.
				</li>
				<li><code>UnmodifiableHttpParameters.wrap</code> now returns <code>null</code> when given <code>null</code>.</li>
				<li>
					New methods to read and write nullable <ao:a rel="nofollow" href="@{javac.link.javaApi}java/lang/Boolean.html">Boolean</ao:a>:
					<ul>
						<li><ao:a href="apidocs/com/aoindustries/io/CompressedDataOutputStream.html#writeNullBoolean-java.lang.Boolean-">CompressedDataOutputStream.writeNullBoolean(Boolean)</ao:a></li>
						<li><ao:a href="apidocs/com/aoindustries/io/CompressedDataInputStream.html#readNullBoolean--">CompressedDataInputStream.readNullBoolean()</ao:a></li>
					</ul>
				</li>
				<li>
					New methods to join into arbitrary <ao:a rel="nofollow" href="@{javac.link.javaApi}java/lang/Appendable.html">Appendable</ao:a>:
					<ul>
						<li><ao:a href="apidocs/com/aoindustries/util/StringUtility.html#join-java.lang.Iterable-java.lang.String-A-">StringUtility.join(Iterable, String, Appendable)</ao:a></li>
						<li><ao:a href="apidocs/com/aoindustries/util/StringUtility.html#join-java.lang.Object:A-java.lang.String-A-">StringUtility.join(Object[], String, Appendable)</ao:a></li>
					</ul>
				</li>
				<li>
					New bundle lookup markup types:
					<ul>
						<li><ao:a href="apidocs/com/aoindustries/util/i18n/MarkupType#MYSQL">MarkupType.MYSQL</ao:a> for the <ao:a href="https://dev.mysql.com/doc/en/mysql.html">MySQL <code>mysql</code> command line</ao:a>.</li>
						<li><ao:a href="apidocs/com/aoindustries/util/i18n/MarkupType#PSQL">MarkupType.PSQL</ao:a> for the <ao:a href="https://www.postgresql.org/docs/current/static/app-psql.html">PostgreSQL <code>psql</code> command line</ao:a>.</li>
						<li><ao:a href="apidocs/com/aoindustries/util/i18n/MarkupType#SH">MarkupType.SH</ao:a> for shell script encoding.</li>
					</ul>
				</li>
				<li>
					<ao:a href="apidocs/com/aoindustries/servlet/http/Dispatcher">Dispatcher</ao:a> may now forward
					and include to caller-provided <ao:a rel="nofollow" href="@{javac.link.javaeeApi.6}javax/servlet/RequestDispatcher.html">RequestDispatcher</ao:a>.
				</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.9.0"
			datePublished="2017-07-19T18:18:38-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Fixed bug in <code>ByteCountInputStream</code> that subtracted the <code>-1</code> returned at end of stream.</li>
				<li>Moved the following classes to the new <core:link book="/ao-lang" page="/index.jspx" /> project:
					<ol>
						<li><code>com.aoindustries.io.AoByteArrayInputStream</code></li>
						<li><code>com.aoindustries.io.AoByteArrayOutputStream</code></li>
						<li><code>com.aoindustries.io.AoCharArrayWriter</code></li>
						<li><code>com.aoindustries.io.Encoder</code></li>
						<li><code>com.aoindustries.io.EncoderWriter</code></li>
						<li><code>com.aoindustries.io.FastExternalizable</code></li>
						<li><code>com.aoindustries.io.FastObjectInput</code></li>
						<li><code>com.aoindustries.io.FastObjectOutput</code></li>
						<li><code>com.aoindustries.io.FileUtils</code></li>
						<li><code>com.aoindustries.io.IoUtils</code></li>
						<li><code>com.aoindustries.io.LocalizedIOException</code></li>
						<li><code>com.aoindustries.io.NullOutputStream</code></li>
						<li><code>com.aoindustries.io.NullPrintWriter</code></li>
						<li><code>com.aoindustries.io.NullWriter</code></li>
						<li><code>com.aoindustries.io.SniffInputStream</code></li>
						<li><code>com.aoindustries.io.Writable</code></li>
						<li><code>com.aoindustries.io.WriterFacade</code></li>
						<li><code>com.aoindustries.io.WriterOutputStream</code></li>
						<li><code>com.aoindustries.lang.Disposable</code></li>
						<li><code>com.aoindustries.lang.DisposedException</code></li>
						<li><code>com.aoindustries.lang.EnumUtils</code></li>
						<li><code>com.aoindustries.lang.LocalizedIllegalArgumentException</code></li>
						<li><code>com.aoindustries.lang.NotImplementedException</code></li>
						<li><code>com.aoindustries.lang.NullArgumentException</code></li>
						<li><code>com.aoindustries.lang.ObjectUtils</code></li>
						<li><code>com.aoindustries.lang.ProcessResult</code></li>
						<li><code>com.aoindustries.lang.RuntimeUtils</code></li>
						<li><code>com.aoindustries.lang.SysExits</code></li>
						<li><code>com.aoindustries.lang.reflect.Methods</code></li>
						<li><code>com.aoindustries.lang.reflect.ReflectionException</code></li>
						<li><code>com.aoindustries.math.BigFraction</code></li>
						<li><code>com.aoindustries.math.LongLong</code></li>
						<li><code>com.aoindustries.math.NullMath</code></li>
						<li><code>com.aoindustries.math.SafeMath</code></li>
						<li><code>com.aoindustries.math.Statistics</code></li>
						<li><code>com.aoindustries.math.UnsignedLong</code></li>
						<li><code>com.aoindustries.nio.charset.Charsets</code></li>
						<li><code>com.aoindustries.security.HashedKey</code></li>
						<li><code>com.aoindustries.security.HashedPassword</code></li>
						<li><code>com.aoindustries.security.Identifier</code></li>
						<li><code>com.aoindustries.security.SmallIdentifier</code></li>
						<li><code>com.aoindustries.sql.LocalizedSQLException</code></li>
						<li><code>com.aoindustries.sql.UnmodifiableTimestamp</code></li>
						<li><code>com.aoindustries.sql.WrappedSQLException</code></li>
						<li><code>com.aoindustries.text.MessageFormatFactory</code></li>
						<li><code>com.aoindustries.text.SmartComparator</code></li>
						<li><code>com.aoindustries.text.UnmodifiableMessageFormat</code></li>
						<li><code>com.aoindustries.time.Clock</code></li>
						<li><code>com.aoindustries.time.Duration</code></li>
						<li><code>com.aoindustries.time.Instant</code></li>
						<li><code>com.aoindustries.util.AoArrays</code></li>
						<li><code>com.aoindustries.util.AoCollections</code></li>
						<li><code>com.aoindustries.util.AtomicSequence</code></li>
						<li><code>com.aoindustries.util.BufferManager</code></li>
						<li><code>com.aoindustries.util.CalendarUtils</code></li>
						<li><code>com.aoindustries.util.ComparatorUtils</code></li>
						<li><code>com.aoindustries.util.EnumerationIterator</code></li>
						<li><code>com.aoindustries.util.ErrorPrinter</code></li>
						<li><code>com.aoindustries.util.GetOpt</code></li>
						<li><code>com.aoindustries.util.HashCodeComparator</code></li>
						<li><code>com.aoindustries.util.IdentityKey</code></li>
						<li><code>com.aoindustries.util.InternUtils</code></li>
						<li><code>com.aoindustries.util.Internable</code></li>
						<li><code>com.aoindustries.util.MinimalList</code></li>
						<li><code>com.aoindustries.util.MinimalMap</code></li>
						<li><code>com.aoindustries.util.PropertiesUtils</code></li>
						<li><code>com.aoindustries.util.Sequence</code></li>
						<li><code>com.aoindustries.util.SortedProperties</code></li>
						<li><code>com.aoindustries.util.UnmodifiableCalendar</code></li>
						<li><code>com.aoindustries.util.UnmodifiableDate</code></li>
						<li><code>com.aoindustries.util.UnsynchronizedSequence</code></li>
						<li><code>com.aoindustries.util.WrappedException</code></li>
						<li><code>com.aoindustries.util.WrappedExceptions</code></li>
						<li><code>com.aoindustries.util.concurrent.ThreadLocalCallable</code></li>
						<li><code>com.aoindustries.util.concurrent.ThreadLocalRunnable</code></li>
						<li><code>com.aoindustries.util.concurrent.ThreadLocalsCallable</code></li>
						<li><code>com.aoindustries.util.concurrent.ThreadLocalsRunnable</code></li>
						<li><code>com.aoindustries.util.i18n.ApplicationResourcesAccessor</code></li>
						<li><code>com.aoindustries.util.i18n.CurrencyComparator</code></li>
						<li><code>com.aoindustries.util.i18n.LocaleComparator</code></li>
						<li><code>com.aoindustries.util.i18n.LocaleString</code></li>
						<li><code>com.aoindustries.util.i18n.Locales</code></li>
						<li><code>com.aoindustries.util.i18n.Money</code></li>
						<li><code>com.aoindustries.util.i18n.ThreadLocale</code></li>
						<li><code>com.aoindustries.util.zip.CorrectedGZIPInputStream</code></li>
						<li><code>com.aoindustries.util.zip.ZipEntryFilter</code></li>
						<li><code>com.aoindustries.util.zip.ZipUtils</code></li>
						<li><code>com.aoindustries.xml.XmlUtils</code></li>
					</ol>
				</li>
				<li>
					New interfaces <code>CompressedReadable</code> and <code>CompressedWritable</code> for
					code that only needs to handle one direction of <code>Streamable</code>.
				</li>
				<li><code>AOPool</code> improvements:
					<ol>
						<li>More fine-grained locking through atomics.</li>
						<li>No longer holding connection lock while connecting.</li>
						<li>Non-blocking statistics methods.</li>
						<li>Bug fix: Notifying other threads on connection allocation.</li>
					</ol>
				</li>
				<li>
					<code>CompressedDataInputStream</code> and <code>CompressedDataInputStream</code> now
					support streaming of <code>Enum</code>s.
				</li>
				<li>Updated dependencies.</li>
				<li><code>WildcardPatternMatcher</code> improvements:
					<ol>
						<li>Coalesces adjacent '*' into a single '*' during parsing.</li>
						<li>Compiles patterns instead of interpreting them on the fly.</li>
						<li>Supports any arbitrary patterns containing '*'.</li>
						<li>Fast-path checks for none, all, prefix, suffix, and exact matches.</li>
						<li>Renamed methods to better represent the functionality.  Left deprecated methods for compatibility.</li>
						<li>Added test suite to verify correctness and benchmark versus equivalent regular expressions.
							<ol type="a">
								<li>The typical performance is 8 to 10 times that of the regular expressions.</li>
								<li>
									Some operations, in particular suffix matching on long strings, can be as high as 2000 times the
									performance of regular expressions.  This is not so uncommon, a typical use-case for
									wildcard patterns is <code>"*.jpg"</code>.
								</li>
							</ol>
						</li>
						<li>
							Like any typical "contains" or "indexOf" string operation, the infix matching can fall-flat when trying to
							find long strings of repeating patterns within an almost-as-long string of repeating patterns
							following by non-matching padding.  When strictly using prefix or suffix matching this
							will never occur.
						</li>
					</ol>
				</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.8.3"
			datePublished="2016-11-15T02:48:59-0600"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>New <core:link book="/ao-oss-parent" page="/index.jspx" /> POM to simplify <code>pom.xml</code> files.</li>
				<li>Project documentation moved to per-project book in <ao:a href="https://semanticcms.com/">SemanticCMS</ao:a> format.</li>
				<li>Added changelog as top-level project link.</li>
				<li>Added utility to find the maximum non-null value.</li>
				<li>Added support for XML DOM Node in toString type coercion.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.8.2"
			datePublished="2016-10-20T15:44:00-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Release of 1.8.1 failed due to JDK bug in bootclasspath set for Javadoc: <ao:a href="https://bugs.openjdk.java.net/browse/JDK-8041628" /></li>
				<li>JDK bug workaround.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.8.1"
			tag="aocode-public-1.8.1"
			datePublished="2016-10-20T15:36:00-0500"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Main method to generate a random Identifier.</li>
				<li>Improved Javadoc formatting.</li>
				<li>Improved README formatting.</li>
				<li>Allowing varargs for locales.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.8.0"
			datePublished="2016-10-06T12:28:00-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Moved servlet-specific methods to a different class to avoid introducing compile-time dependencies on servlet api to non-servlet projects.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.7.0"
			datePublished="2016-10-04T19:17:00-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<section:section label="Added">
				<ul>
					<li>Java 1.7 compatible long sorting for pre-Java 1.7 use.</li>
					<li>Now automatically maintains some ThreadLocal values between caller and executor during concurrent processing, and provides wrapper hook for subclasses to extend.</li>
					<li>Recurring now allows null during parsing and returns null.</li>
					<li>Convenience method to make unmodifiable from MinimalList and MinimalMap.</li>
					<li>Background-refreshed cache implementation.</li>
					<li>Caching access to ServletContext to improve performance.</li>
				</ul>
			</section:section>
			<section:section label="Changed">
				<ul>
					<li>Improved Javadoc formatting.</li>
					<li>Additional compiler flags in preparation to do away with our old Ant build system.</li>
					<li>Using request object instead of ThreadLocals to support asynchronous and concurrent request processing.</li>
					<li>Working on thread safety for concurrent sub requests.</li>
					<li>Avoiding setting ThreadLocal when value has not changed.</li>
					<li>nullIfEmpty moved to StringUtility.</li>
					<li>Each lock object now a small empty class to help identify lock contention.
						<p>
							The lock contention profiler in NetBeans is just showing "java.lang.Object" all over, and can't seem to
							get from the lock object id to the actual object in the heap dump using OQL (id not found).
						</p>
					</li>
					<li>Using minimal list to efficiently filter small numbers of matches.</li>
					<li>Number of buffers is now unlimited.</li>
				</ul>
			</section:section>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.6.1"
			datePublished="2016-09-02T16:26:00-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Improved Maven configuration for Java EE 6 dependencies.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.6"
			datePublished="2016-08-28T20:17:00-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Efficient way to check if writables empty.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.5"
			datePublished="2016-08-21T15:14:00-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Wildcard to show immutability just cluttered the API, reverted.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.4"
			datePublished="2016-08-19T14:02:00-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Allowing ao-taglib style "arg" maps to be passed through Dispatcher for non-taglib use.</li>
				<li>args passed unmodifiable.</li>
				<li><![CDATA[Passing args as Map&lt;String,?&gt; instead of forcing Map&lt;String,Object&gt;]]></li>
				<li>Returning wildcard bound list as it better captures the essence of the unmodifiable list returned.</li>
				<li>Java 1.7 compatible boolean sorting for pre-Java 1.7 use.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.3"
			datePublished="2016-08-07T23:16:00-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Reverted to Java 1.6 for Android and Java EE 6 compatibility.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.2"
			datePublished="2016-08-05T12:42:00-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Testing if nexus-staging:release required when using autoReleaseAfterClose=true</li>
				<li>Now deployed to The Central Repository.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.1"
			tag="aocode-public-1.1"
			datePublished="2016-08-05T09:32:00-0500"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Java EE 6 optional, since only used by a subset of the features.</li>
				<li>Preparing to deploy to The Central Repository.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.0"
			tag="aocode-public-1.0"
			datePublished="2016-08-04T17:43:00-0500"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Project moved to GitHub and Maven.</li>
				<li>Ignoring locales with scripts or extensions since this API predates them.</li>
			</ul>
		</changelog:release>
	</core:page>
</jsp:root>
